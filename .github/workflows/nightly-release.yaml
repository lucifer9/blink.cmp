name: Sync and Nightly Release

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: # Allows manual triggering

jobs:
  sync:
    name: Sync with upstream
    runs-on: ubuntu-latest
    outputs:
      changes_pulled: ${{ steps.check_changes.outputs.changes_pulled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Add upstream remote
        run: git remote add upstream https://github.com/Saghen/blink.cmp

      - name: Fetch upstream
        run: git fetch upstream

      - name: Check for changes
        id: check_changes
        run: |
          UPSTREAM_STATUS=$(git rev-list --left-right --count HEAD...upstream/main)
          BEHIND=$(echo $UPSTREAM_STATUS | cut -f2 | xargs)
          if [[ "$BEHIND" != "0" ]]; then
            echo "Merging changes from upstream/main..."
            echo "changes_pulled=true"  >> "$GITHUB_OUTPUT"
            git merge upstream/main
          else
            echo "No changes to merge from upstream/main."
            echo "changes_pulled=false"  >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes
        if: steps.check_changes.outputs.changes_pulled == 'true'
        run: |
          git push origin main
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: sync
    if: needs.sync.outputs.changes_pulled == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          ## Linux builds
          # Glibc 2.31
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: target/x86_64-unknown-linux-gnu/release/libblink_cmp_fuzzy.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: target/aarch64-unknown-linux-gnu/release/libblink_cmp_fuzzy.so
          # Musl 1.2.3
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: target/x86_64-unknown-linux-musl/release/libblink_cmp_fuzzy.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: target/aarch64-unknown-linux-musl/release/libblink_cmp_fuzzy.so

          ## macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: target/x86_64-apple-darwin/release/libblink_cmp_fuzzy.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: target/aarch64-apple-darwin/release/libblink_cmp_fuzzy.dylib

          ## Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: target/x86_64-pc-windows-msvc/release/blink_cmp_fuzzy.dll

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup toolchain install nightly
          rustup default nightly
          rustup target add ${{ matrix.target }}

      - name: Build for Linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.so"

      - name: Build for macOS
        if: contains(matrix.os, 'macos')
        run: |
          # Ventura (https://en.wikipedia.org/wiki/MacOS_version_history#Releases)
          #MACOSX_DEPLOYMENT_TARGET="13" 
          cargo build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dylib"

      - name: Build for Windows
        if: contains(matrix.os, 'windows')
        run: |
          cargo build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dll"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: needs.sync.outputs.changes_pulled == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          token: ${{ github.token }}
          files: ./**/*
          draft: false
          prerelease: true
          generate_release_notes: true
